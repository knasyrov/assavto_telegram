from aiogram import Bot, Dispatcher, executor
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiohttp import web
from config.settings import BOT_TOKEN
from utils.db import init_db, add_user, remove_user, is_user_authorized, get_authorized_users
import asyncio
from api.client import APIClient
import re
from handlers.applications import register_handlers as register_applications_handlers
from handlers.orders import register_handlers as register_orders_handlers
from handlers.stats import register_handlers as register_stats_handlers


# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
register_applications_handlers(dp)
register_orders_handlers(dp)
register_stats_handlers(dp)
# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä API –∫–ª–∏–µ–Ω—Ç–∞
api_client = APIClient()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db()

# –®–∞–≥–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
class AuthStates(StatesGroup):
    waiting_for_login = State()
    waiting_for_password = State()

# AIOHTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤
app = web.Application()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def start_command(message: Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ."""
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∞—à–∏–º —Å–∞–π—Ç–æ–º.\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "- –ü–æ–ª—É—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "- –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ\n"
        "- –†–∞–±–æ—Ç–∞—Ç—å —Å –∑–∞–∫–∞–∑–∞–º–∏\n"
        "- –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö\n"
        "\n–í–≤–µ–¥–∏—Ç–µ /menu, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É."
    )

# –ö–æ–º–∞–Ω–¥–∞ menu
@dp.message_handler(commands=['menu'])
async def menu_command(message: Message):
    """–í—ã–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await render_main_menu(message, message.from_user.id)

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
async def render_main_menu(message_or_call, user_id: int):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —É—á—ë—Ç–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
    authorized = is_user_authorized(user_id)

    keyboard = InlineKeyboardMarkup()
    if authorized:
        keyboard.add(InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"))
        keyboard.add(InlineKeyboardButton("üì¶ –ó–∞–∫–∞–∑—ã", callback_data="orders"))
        keyboard.add(InlineKeyboardButton("üìÑ –ó–∞—è–≤–∫–∏", callback_data="applications"))
        keyboard.add(InlineKeyboardButton("üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏", callback_data="suppliers"))
        keyboard.add(InlineKeyboardButton("üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã", callback_data="logout"))
        keyboard.add(InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help"))
        menu_message = "–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    else:
        keyboard.add(InlineKeyboardButton("üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", callback_data="login"))
        keyboard.add(InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help"))
        menu_message = "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é."

    if isinstance(message_or_call, CallbackQuery):
        await message_or_call.message.edit_text(menu_message, reply_markup=keyboard)
        await message_or_call.answer()
    elif isinstance(message_or_call, Message):
        await message_or_call.answer(menu_message, reply_markup=keyboard)



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Å Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@dp.callback_query_handler(lambda call: call.data in ["stats", "login", "logout", "help", "back_to_main_menu"])
async def handle_inline_commands(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Å Inline-–∫–Ω–æ–ø–æ–∫."""
    action = call.data

    if action == "stats":
        await show_stats_menu(call)
    elif action == "login":
        await login_command(call.message)
    elif action == "logout":
        await logout_command(call)
    elif action == "help":
        await help_command(call)
    elif action == "back_to_main_menu":
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await call.message.delete()
        await render_main_menu(call.message, call.from_user.id)

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(call: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö."""
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "- üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É\n"
        "- üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É\n"
        "- üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã: —Ä–∞–∑–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è\n"
        "- ‚ÑπÔ∏è –ü–æ–º–æ—â—å: –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await call.message.delete()
    await call.message.answer(help_text)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –º–µ–Ω—é
    await render_main_menu(call.message, call.from_user.id)
    

# –ö–æ–º–∞–Ω–¥–∞ /login
async def login_command(message_or_call):
    """–ù–∞—á–∞–ª–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
    if isinstance(message_or_call, Message):
        await message_or_call.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
    elif isinstance(message_or_call, CallbackQuery):
        await message_or_call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
        await message_or_call.answer()
    await AuthStates.waiting_for_login.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞
@dp.message_handler(state=AuthStates.waiting_for_login)
async def process_login(message: Message, state: FSMContext):
    await state.update_data(login=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
    await AuthStates.waiting_for_password.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è
@dp.message_handler(state=AuthStates.waiting_for_password)
async def process_password(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
    user_data = await state.get_data()
    login = user_data.get("login")
    password = message.text

    try:
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ API
        auth_response = api_client.login(login, password)
        if auth_response:
            access_token = auth_response.get("access_token")
            refresh_token = auth_response.get("refresh_token")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            add_user(
                telegram_id=message.from_user.id,
                access_token=access_token,
                refresh_token=refresh_token
            )
            await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")

            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
            await render_main_menu(message, message.from_user.id)
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.finish()

# –ö–æ–º–∞–Ω–¥–∞ /logout
async def logout_command(call: CallbackQuery):
    # message_or_call
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã."""
    user_id = call.from_user.id

    if is_user_authorized(user_id):
        remove_user(user_id)

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await call.message.delete()
        await call.message.answer('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã')

    else:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await call.message.delete()
        await call.message.answer('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã')

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –º–µ–Ω—é
    await render_main_menu(call.message, call.from_user.id)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ ‚Äúüì¶ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏‚Äù
@dp.callback_query_handler(lambda call: call.data == "suppliers")
async def show_suppliers(call: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤."""
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("4 —Ç–æ—á–∫–∏", callback_data="supplier_tochki"))
    keyboard.add(InlineKeyboardButton("–ë—Ä–∏–Ω–µ–∫—Å", callback_data="supplier_brineks"))
    keyboard.add(InlineKeyboardButton("–ú–µ–¥–≤–µ–¥—å", callback_data="supplier_medved"))
    keyboard.add(InlineKeyboardButton("–®–∏–Ω–∏–Ω–≤–µ—Å—Ç", callback_data="supplier_shininvest"))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main_menu"))
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:", reply_markup=keyboard)
    await call.answer()

@dp.callback_query_handler(lambda call: call.data.startswith("supplier_"))
async def show_supplier_menu(call: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞."""
    supplier_slug = call.data.split("_")[-1]
    supplier_name = {
        "tochki": "4 —Ç–æ—á–∫–∏",
        "brineks": "–ë—Ä–∏–Ω–µ–∫—Å",
        "medved": "–ú–µ–¥–≤–µ–¥—å",
        "shininvest": "–®–∏–Ω–∏–Ω–≤–µ—Å—Ç"
    }.get(supplier_slug, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫")

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–º–ø–æ—Ä—Ç–µ", callback_data=f"import_{supplier_slug}"))
    keyboard.add(InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞", callback_data=f"suppliersettings_{supplier_slug}"))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º", callback_data="suppliers"))

    await call.message.edit_text(f"–ú–µ–Ω—é –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {supplier_name}", reply_markup=keyboard)
    await call.answer()

@dp.callback_query_handler(lambda call: call.data.startswith("import_"))
async def show_import_info(call: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–º–ø–æ—Ä—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞."""
    supplier_slug = call.data.split("_")[1]
    try:
        import_data = api_client.get_supplier_import(call.from_user.id, supplier_slug)
        if not import_data:
            await call.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–º–ø–æ—Ä—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        supplier = import_data.get("supplier_data", {})
        tasks = import_data.get("task_results", {})
        tire_task = tasks.get("tire", {})
        disk_task = tasks.get("disk", {})

        import_text = (
            f"<b>üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫:</b> {supplier.get('name')}\n"
            f"<b>üí∞ –ù–∞—Ü–µ–Ω–∫–∞:</b> {supplier.get('extra_charge')}\n\n"
            f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–º–ø–æ—Ä—Ç—ã:</b>\n"
            f"üîπ <b>–®–∏–Ω—ã:</b> {tire_task.get('last_status', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
            f"   <b>–î–∞—Ç–∞:</b> {tire_task.get('last_run_time', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
            f"üîπ <b>–î–∏—Å–∫–∏:</b> {disk_task.get('last_status', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
            f"   <b>–î–∞—Ç–∞:</b> {disk_task.get('last_run_time', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
        )

        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É", callback_data=f"supplier_{supplier_slug}"))

        await call.message.edit_text(import_text, reply_markup=keyboard, parse_mode="HTML")
        await call.answer()
    except Exception as e:
        await call.message.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
class SupplierSettingsStates(StatesGroup):
    waiting_for_extra_charge = State()

# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª "–ù–∞—Å—Ç—Ä–æ–π–∫–∞"
@dp.callback_query_handler(lambda call: call.data.startswith("suppliersettings_"))
async def supplier_settings(call: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞."""
    supplier_slug = call.data.split("_")[-1]
    
    # –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    new_text = (
        f"–í—ã –≤ —Ä–∞–∑–¥–µ–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: <b>{supplier_slug}</b>\n"
        f"üîß –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞."
    )
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Ü–µ–Ω–∫—É", callback_data=f"edit_extra_charge_{supplier_slug}"))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É", callback_data=f"supplier_{supplier_slug}"))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    if call.message.text != new_text or call.message.reply_markup != keyboard:
        await call.message.edit_text(new_text, reply_markup=keyboard, parse_mode="HTML")
    else:
        await call.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ.")  # –ß—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "–∑–∞–≥—Ä—É–∑–∫–∞" –≤ Telegram

# –ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Ü–µ–Ω–∫–∏
@dp.callback_query_handler(lambda call: call.data.startswith("edit_extra_charge_"))
async def edit_extra_charge_start(call: CallbackQuery):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—É—é –Ω–∞—Ü–µ–Ω–∫—É."""
    supplier_slug = call.data.split("_")[-1]
    await SupplierSettingsStates.waiting_for_extra_charge.set()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º slug –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    async with dp.current_state(user=call.from_user.id).proxy() as state_data:
        state_data["supplier_slug"] = supplier_slug
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_edit"))
    await call.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –Ω–∞—Ü–µ–Ω–∫—É –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ {supplier_slug}.\n"
        "–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º, –Ω–µ –º–µ–Ω—å—à–µ 1. –ù–∞–ø—Ä–∏–º–µ—Ä: 1.1 –∏–ª–∏ 1,1.",
        reply_markup=keyboard
    )
    await call.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞—Ü–µ–Ω–∫–∏
@dp.message_handler(state=SupplierSettingsStates.waiting_for_extra_charge)
async def process_extra_charge_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞—Ü–µ–Ω–∫–∏."""
    extra_charge_input = message.text.strip()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è
    if not re.match(r"^\d+(\.\d+|,\d+)?$", extra_charge_input) or float(extra_charge_input.replace(",", ".")) < 1:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ 1. –ù–∞–ø—Ä–∏–º–µ—Ä: 1.1 –∏–ª–∏ 1,1.")
        return

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫ —á–∏—Å–ª–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
    extra_charge = float(extra_charge_input.replace(",", "."))
    
    # –ü–æ–ª—É—á–∞–µ–º slug –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    async with state.proxy() as state_data:
        supplier_slug = state_data["supplier_slug"]

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ API
        response_data = api_client.update_supplier_settings(message.from_user.id, supplier_slug, extra_charge)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á "status"
        if response_data.get("status") == "error":
            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Ü–µ–Ω–∫—É. –û—à–∏–±–∫–∞: {response_data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        else:
            await message.answer(f"–ù–∞—Ü–µ–Ω–∫–∞ –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ {supplier_slug} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {extra_charge}.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.finish()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É", callback_data=f"supplier_{supplier_slug}"))
    await message.answer(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ {supplier_slug} –æ–±–Ω–æ–≤–ª–µ–Ω—ã.", reply_markup=keyboard)
    

# –û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Ü–µ–Ω–∫–∏
@dp.callback_query_handler(lambda call: call.data == "cancel_edit", state=SupplierSettingsStates.waiting_for_extra_charge)
async def cancel_edit(call: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Ü–µ–Ω–∫–∏."""
    await state.finish()
    await call.message.edit_text("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Ü–µ–Ω–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await call.answer()
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –º–µ–Ω—é
    await render_main_menu(call.message, call.from_user.id)


# –í–µ–±—Ö—É–∫ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
async def orders_webhook(request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö."""
    try:
        order = await request.json()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        if not order:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            return web.json_response({"error": "Invalid data"}, status=400)

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
        detail = order['detail']
        order_text = (
            f"<b>üì¶ –ù–û–í–´–ô –ó–ê–ö–ê–ó ‚Ññ{detail['id']}</b>\n\n"
            f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:</b>\n"
            f"üìù <b>–°—Ç–∞—Ç—É—Å:</b> {detail['status']['status_name']}\n"
            f"üí∞ <b>–°—É–º–º–∞:</b> {detail['total_price_with_discount']} ‚ÇΩ\n"
            f"üì¶ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤:</b> {sum(item['quantity'] for item in detail['items'])}\n"
            f"üì¶ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π:</b> {len(detail['items'])}\n"
            f"üìç <b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {detail['address'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:</b>\n"
            f"üë§ <b>–ò–º—è:</b> {detail['first_name']} {detail['last_name'] or ''} {detail['patronymic'] or ''}\n"
            f"üìß <b>Email:</b> {detail['email'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {detail['tel'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        )

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
        order_text += "<b>üõí –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:</b>\n"
        for idx, item in enumerate(detail['items'], start=1):
            product = item['product']
            order_text += (
                f"{idx}. üîπ <b>{product['name']}</b>\n"
                f"    üÜî –ê—Ä—Ç–∏–∫—É–ª: {product['item_number']}\n"
                f"    üí∞ –¶–µ–Ω–∞: {item['price']} ‚ÇΩ\n"
                f"    üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['quantity']} —à—Ç.\n"
            )

            # –†–∞–∑–±–∏–≤–∫–∞ –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º
            if 'product_supplier_info' in product and product['product_supplier_info']:
                order_text += "    üìä –û—Å—Ç–∞—Ç–∫–∏ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:\n"
                for supplier in product['product_supplier_info']:
                    supplier_info = supplier.get('supplier_info', {})
                    order_text += (
                        f"        üî∏ <b>{supplier_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫')}:</b>\n"
                        f"           ‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫: {supplier['quantity']} —à—Ç.\n"
                        f"           ‚Ä¢ –¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {supplier['purchase_price']} ‚ÇΩ\n"
                        f"           ‚Ä¢ –¶–µ–Ω–∞ —Å –Ω–∞—Ü–µ–Ω–∫–æ–π: {supplier['extra_charge_price']} ‚ÇΩ\n"
                    )
            else:
                order_text += "    ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞—Ö.\n"

            order_text += "\n"

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–∫–∞–∑—É", url=f"https://ass74.ru/order/{detail['unique_token']}"))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        authorized_users = get_authorized_users()
        async def send_notifications():
            for user_id in authorized_users:
                await bot.send_message(chat_id=user_id, text=order_text, reply_markup=keyboard, parse_mode="HTML")

        asyncio.create_task(send_notifications())
        return web.json_response({"status": "success"})

    except Exception as e:
        return web.json_response({"error": str(e)}, status=500)

# –í–µ–±—Ö—É–∫ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
async def feedback_webhook(request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
    try:
        application = await request.json()
        if not application:
            return web.json_response({"error": "Invalid data"}, status=400)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        application_text = (
            f"<b>üìÑ –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê ‚Ññ{application['id']}</b>\n\n"
            f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ:</b>\n"
            f"üìù <b>–°—Ç–∞—Ç—É—Å:</b> {application['status']}\n"
            f"üìß <b>Email:</b> {application['email'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {application['tel'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {application['comment'] or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
            f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {application['created']}\n"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        authorized_users = get_authorized_users()
        async def send_notifications():
            for user_id in authorized_users:
                await bot.send_message(chat_id=user_id, text=application_text, parse_mode="HTML")

        asyncio.create_task(send_notifications())
        return web.json_response({"status": "success"})

    except Exception as e:
        return web.json_response({"error": str(e)}, status=500)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤–µ–±—Ö—É–∫–æ–≤
app.router.add_post('/webhook/orders', orders_webhook)
app.router.add_post('/webhook/feedback', feedback_webhook)


# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    loop = asyncio.get_event_loop()

    # –ó–∞–ø—É—Å–∫ aiohttp-—Å–µ—Ä–≤–µ—Ä–∞
    runner = web.AppRunner(app)
    loop.run_until_complete(runner.setup())
    site = web.TCPSite(runner, "127.0.0.1", 5000)
    loop.run_until_complete(site.start())

    # –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True, loop=loop)