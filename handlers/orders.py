from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Dispatcher
from api.client import APIClient

api_client = APIClient()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ ‚Äúüì¶ –ó–∞–∫–∞–∑—ã‚Äù
async def show_orders(call: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)."""
    await show_orders_page(call, 1)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º"
async def handle_orders_pagination(call: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤."""
    page = int(call.data.split("_")[-1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    await show_orders_page(call, page)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
async def show_orders_page(call: CallbackQuery, page: int):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–∫–∞–∑—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
    try:
        # –ó–∞–ø—Ä–æ—Å –∫ API
        orders_response = api_client.get_orders(call.from_user.id, page)
        orders = orders_response.get("data", [])
        total_pages = orders_response.get("total_pages", 1)
        current_page = orders_response.get("current_page", 1)

        if not orders:
            await call.message.edit_text("–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            await render_main_menu(call, call.from_user.id)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
        keyboard = InlineKeyboardMarkup()
        for order in orders:
            button_text = f"‚Ññ{order['id']} | {order['status']['status_name']} | {order['total_price_with_discount']} ‚ÇΩ"
            keyboard.add(InlineKeyboardButton(button_text, callback_data=f"order_{order['id']}"))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        if current_page > 1:
            keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"orders_page_{current_page - 1}"))
        if current_page < total_pages:
            keyboard.add(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"orders_page_{current_page + 1}"))
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main_menu"))

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await call.message.edit_text(f"üì¶ –ó–∞–∫–∞–∑—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page} –∏–∑ {total_pages}):", reply_markup=keyboard)
        await call.answer()
    except Exception as e:
        await call.message.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await render_main_menu(call, call.from_user.id)        



# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
async def show_order_details(call: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏."""
    order_id = int(call.data.split("_")[1])
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
        order = api_client.get_order_details(call.from_user.id, order_id)
        if not order:
            await call.message.edit_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
        detail = order['detail']
        order_text = (
            f"<b>üì¶ –ó–∞–∫–∞–∑ ‚Ññ{detail['id']}</b>\n\n"
            f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:</b>\n"
            f"üìù <b>–°—Ç–∞—Ç—É—Å:</b> {detail['status']['status_name']}\n"
            f"üí∞ <b>–°—É–º–º–∞:</b> {detail['total_price_with_discount']} ‚ÇΩ\n"
            f"üì¶ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤:</b> {sum(item['quantity'] for item in detail['items'])}\n"
            f"üì¶ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π:</b> {len(detail['items'])}\n"
            f"üìç <b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {detail['address'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:</b>\n"
            f"üë§ <b>–ò–º—è:</b> {detail['first_name']} {detail['last_name'] or ''} {detail['patronymic'] or ''}\n"
            f"üìß <b>Email:</b> {detail['email'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {detail['tel'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        )

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
        order_text += "<b>üõí –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:</b>\n"
        for idx, item in enumerate(detail['items'], start=1):
            product = item['product']
            order_text += (
                f"{idx}. üîπ <b>{product['name']}</b>\n"
                f"    üÜî –ê—Ä—Ç–∏–∫—É–ª: {product['item_number']}\n"
                f"    üí∞ –¶–µ–Ω–∞: {item['price']} ‚ÇΩ\n"
                f"    üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['quantity']} —à—Ç.\n"
            )

            # –†–∞–∑–±–∏–≤–∫–∞ –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º
            if 'product_supplier_info' in product and product['product_supplier_info']:
                order_text += "    üìä –û—Å—Ç–∞—Ç–∫–∏ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:\n"
                for supplier in product['product_supplier_info']:
                    supplier_info = supplier.get('supplier_info', {})
                    order_text += (
                        f"        üî∏ <b>{supplier_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫')}:</b>\n"
                        f"           ‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫: {supplier['quantity']} —à—Ç.\n"
                        f"           ‚Ä¢ –¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤–∫–∏: {supplier['purchase_price']} ‚ÇΩ\n"
                        f"           ‚Ä¢ –¶–µ–Ω–∞ —Å –Ω–∞—Ü–µ–Ω–∫–æ–π: {supplier['extra_charge_price']} ‚ÇΩ\n"
                    )
            else:
                order_text += "    ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞—Ö.\n"

            order_text += "\n"

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–∫–∞–∑—É", url=f"https://ass74.ru/order/{detail['unique_token']}"))
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data=f"orders_page_1"))

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        await call.message.edit_text(order_text, reply_markup=keyboard, parse_mode="HTML")
        await call.answer()
    except Exception as e:
        await call.message.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫–∞–∑–æ–≤."""
    dp.register_callback_query_handler(show_orders, lambda call: call.data == "orders")
    dp.register_callback_query_handler(handle_orders_pagination, lambda call: call.data.startswith("orders_page_"))
    dp.register_callback_query_handler(show_order_details, lambda call: call.data.startswith("order_"))