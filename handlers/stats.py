from aiogram import Dispatcher
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from api.client import APIClient
from datetime import datetime, timedelta

api_client = APIClient()

# –ö–æ–º–∞–Ω–¥–∞ /stats
async def show_stats_menu(message_or_call):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üìÖ –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", callback_data="current_month"))
    keyboard.add(InlineKeyboardButton("üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2 –º–µ—Å—è—Ü–∞", callback_data="last_2_months"))
    keyboard.add(InlineKeyboardButton("üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞", callback_data="last_3_months"))
    keyboard.add(InlineKeyboardButton("üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤", callback_data="last_6_months"))
    keyboard.add(InlineKeyboardButton("üìÖ –ó–∞ –≥–æ–¥", callback_data="last_year"))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_menu"))

    if isinstance(message_or_call, CallbackQuery):
        await message_or_call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=keyboard)
        await message_or_call.answer()  # –£–±–∏—Ä–∞–µ—Ç "–∑–∞–≥—Ä—É–∑–∫–∞..." –≤ Telegram
    elif isinstance(message_or_call, Message):
        await message_or_call.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
async def process_stats_choice(call: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞."""
    choice = call.data
    today = datetime.today()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    if choice == "current_month":
        start_date = today.replace(day=1).strftime('%Y-%m-%d')
    elif choice == "last_2_months":
        start_date = (today - timedelta(days=60)).replace(day=1).strftime('%Y-%m-%d')
    elif choice == "last_3_months":
        start_date = (today - timedelta(days=90)).replace(day=1).strftime('%Y-%m-%d')
    elif choice == "last_6_months":
        start_date = (today - timedelta(days=180)).replace(day=1).strftime('%Y-%m-%d')
    elif choice == "last_year":
        start_date = today.replace(year=today.year - 1, day=1).strftime('%Y-%m-%d')
    else:
        await call.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await call.answer()
        return

    end_date = today.strftime('%Y-%m-%d')

    try:
        dashboard = api_client.get_dashboard(call.message.chat.id, start_date, end_date)
        if not dashboard:
            await call.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        indicators = dashboard.get("indicators", [])
        response = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å {start_date} –ø–æ {end_date}:\n"
        for indicator in indicators:
            response += f"- {indicator['name']}: {indicator['value']}\n"

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await call.message.delete()
        await call.message.answer(response)

        from app import render_main_menu
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –º–µ–Ω—é
        await render_main_menu(call.message, call.from_user.id)

    except Exception as e:
        await call.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await call.answer()

def register_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(show_stats_menu, lambda call: call.data == "stats")
    dp.register_callback_query_handler(process_stats_choice, lambda call: call.data in ["current_month", "last_2_months", "last_3_months", "last_6_months", "last_year"])