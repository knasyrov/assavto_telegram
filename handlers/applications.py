from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Dispatcher
from api.client import APIClient

# –°–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç
api_client = APIClient()

async def show_applications(call: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)."""
    await show_applications_page(call, 1)

async def handle_applications_pagination(call: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫."""
    page = int(call.data.split("_")[-1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    await show_applications_page(call, page)

async def show_applications_page(call: CallbackQuery, page: int):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞—è–≤–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
    try:
        # –ó–∞–ø—Ä–æ—Å –∫ API
        applications_response = api_client.get_applications(call.from_user.id, page)
        applications = applications_response.get("data", [])
        total_pages = applications_response.get("total_pages", 1)
        current_page = applications_response.get("current_page", 1)

        if not applications:
            await call.message.edit_text("–ó–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            # –ó–¥–µ—Å—å –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –º–µ–Ω—é, –µ—Å–ª–∏ render_main_menu –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞—è–≤–æ–∫
        keyboard = InlineKeyboardMarkup()
        for application in applications:
            button_text = f"‚Ññ{application['id']} | {application['status']} | {application['name']}"
            keyboard.add(InlineKeyboardButton(button_text, callback_data=f"application_{application['id']}"))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        if current_page > 1:
            keyboard.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"applications_page_{current_page - 1}"))
        if current_page < total_pages:
            keyboard.add(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"applications_page_{current_page + 1}"))
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main_menu"))

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await call.message.edit_text(f"üìÑ –ó–∞—è–≤–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page} –∏–∑ {total_pages}):", reply_markup=keyboard)
        await call.answer()
    except Exception as e:
        await call.message.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        # –ó–¥–µ—Å—å –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –º–µ–Ω—é, –µ—Å–ª–∏ render_main_menu –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

async def show_application_details(call: CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏."""
    application_id = int(call.data.split("_")[-1])
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ
        application = api_client.get_application_details(call.from_user.id, application_id)
        if not application:
            await call.message.edit_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ
        application_text = (
            f"<b>üìÑ –ó–∞—è–≤–∫–∞ ‚Ññ{application['id']}</b>\n\n"
            f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ:</b>\n"
            f"üìù <b>–°—Ç–∞—Ç—É—Å:</b> {application['status']}\n"
            f"üìß <b>Email:</b> {application['email'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {application['tel'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {application['comment'] or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
            f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {application['created']}\n"
        )

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∑–∞—è–≤–∫–∞–º", callback_data=f"applications_page_1"))

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        await call.message.edit_text(application_text, reply_markup=keyboard, parse_mode="HTML")
        await call.answer()
    except Exception as e:
        await call.message.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—è–≤–æ–∫."""
    dp.register_callback_query_handler(show_applications, lambda call: call.data == "applications")
    dp.register_callback_query_handler(handle_applications_pagination, lambda call: call.data.startswith("applications_page_"))
    dp.register_callback_query_handler(show_application_details, lambda call: call.data.startswith("application_"))